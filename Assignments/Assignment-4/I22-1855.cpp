//LAIBA MAZHAR
//I22-1855
//PF-J
//laibamazhar.000@gmail.com

/* FAST university wants to launch bus transportation service for studentsand faculty.The fleet of buses will travel across Islamabad
city, and FAST requires a system to track the fuel consumptionand distance traveled by each bus per month.
To fulfil this requirement, a C++ program needs to be developed that takes daily fuel consumptionand distance traveled data for
each busand stores it in a multi - dimensional array.The program should provide a menu of options to the fleet manager for the
following tasks :
1. Finding the total fuel consumption and distance traveled for each bus.
2. Finding the average fuel efficiency for each busand display its details.
3. Finding the bus with the highest fuel efficiency and display its details
4. Calculating the total fuel cost for each busand the average speed for each bus.
5. Calculate the total fuel consumption and distance traveled for all buses in a given month
6. Calculate the total revenue generated by the bus transportation service for a given month, based on the number of
   passengers(assume) and the fare charged per passenger(assume).
7. Find the bus with the lowest fuel efficiency and display its details
8. Sort the data based on certain criteria, such as sorting by bus number or fuel efficiency */

#include<iostream>
#include <thread>
using namespace std;
void readData(int fuel_consumption[][3], int distance_travelled[][3], int total_buses, int days)
{
	float fuel_tank_capacity = 100;
	float maximum_distance_capacity = 100;
	for (int i = 1; i <= total_buses; i++)
	{
		for (int j = 1; j <= days; j++)
		{
		fuel_invalid:
			cout << "Enter the fuel consumption for the bus # " << i << " on date " << j << " " << endl;
			
				cin >> fuel_consumption[i][j];
			
				if (fuel_consumption[i][j] > fuel_tank_capacity)
			{
				cout << "INVALID INPUT!" << endl;
				goto fuel_invalid;
			}
		}
	}
	for (int i = 1; i <= total_buses; i++)
	{
		for (int j = 1; j <= days; j++)
		{
		distance_invalid:

			cout << "Enter the distance travelled for the bus # " << i << " on date " << j << " " << endl;
			
				cin >> distance_travelled[i][j];
				if (distance_travelled[i][j] > maximum_distance_capacity)
				{
			
				cout << "INVALID INPUT!" << endl;
				goto distance_invalid;
			}
		}
	}
}
//////////////////
int Total_fuel_consumption(int fuel_consumption[][3], int bus_no, int days, int total_buses)
{
	float bus_fuel_consumption = 0.0;
	for (int i = 1; i <= total_buses; i++)
	{
		for (int j = 1; j <= days; j++)
		{
			if (i == bus_no)
			{
				bus_fuel_consumption += fuel_consumption[i][j];
			}
		}
	}
	return bus_fuel_consumption;
}
//////////////////
int Total_distance_travelled(int distance_travelled[][3], int bus_no, int days, int total_buses)
{
	float bus_distance = 0.0;
	for (int i = 1; i <= total_buses; i++)
	{
		for (int j = 1; j <= days; j++)
		{
			if (i == bus_no)
			{
				bus_distance += distance_travelled[i][j];
			}

		}
	}
	return bus_distance;
}
/////////////////

int Average_fuel_effieciency(int fuel_consumption[][3], int distance_travelled[][3], int bus_no, int days, int total_buses)
{
	float bus_distance = 0.0;
	float bus_fuel_consumption = 0.0;
	float average_fuel_efficiency = 0;
	for (int i = 1; i <= total_buses; i++)
	{
		for (int j = 0; j < days; j++)
		{
			if (i == bus_no)
			{
				bus_fuel_consumption += fuel_consumption[i][j];
				bus_distance += distance_travelled[i][j];
				average_fuel_efficiency = (bus_distance / bus_fuel_consumption);
			}
		}
	}


	return  average_fuel_efficiency;

}
//////////////
int Efiiciency_LOWEST(int fuel_consumption[][3], int distance_travelled[][3], int days, int total_buses)
{
	float find_min_array[3] = { 0 };
	for (int i = 0; i < total_buses; i++)
	{
		float bus_distance = 0.0;
		float bus_fuel_consumption = 0.0;
		for (int j = 0; j < 3; j++)
		{
			bus_fuel_consumption += fuel_consumption[i][j];
			bus_distance += distance_travelled[i][j];
		}
		find_min_array[i] = (bus_distance / bus_fuel_consumption);
	}
	float lowest_efficiency = find_min_array[0];
	int Lowest_bus = 0;
	for (int i = 1; i < total_buses; i++)
	{


		// checking and 
		//finding the min

		if (find_min_array[i] < lowest_efficiency)
		{



			lowest_efficiency = find_min_array[i];

			Lowest_bus = i;
		}
	}

	return Lowest_bus;
}

int Fuel_EFFICIENCY_Highest(int fuel_consumption[][3], int distance_travelled[][3], int days, int total_buses)
{
	float max[20] = { 0 };
	for (int i = 1; i <= total_buses; i++)
	{
		float bus_distance = 0.0;
		float bus_fuel_consumption = 0.0;
		for (int j = 1; j <= days; j++)
		{
			bus_fuel_consumption += fuel_consumption[i][j];
			bus_distance += distance_travelled[i][j];
		}
		max[i] = (bus_distance / bus_fuel_consumption);
	}
	float high_efficiency = max[0];
	int Highet_bus = 0;
	for (int i = 1; i <= days; i++) {


		/// iterating for all buses

		if (max[i] > high_efficiency)
		{
			// finding the bus with maX index
			high_efficiency = max[i];


			Highet_bus = i;
		}
	}
	// returning yhe highest value
	return Highet_bus;
}
float Total_fuel_cost(int bus_no, int cost, int distance_travelled[][3], int days)
{
	float bus_distance = 0.0;
	for (int i = 1; i <= days; i++)
	{
		bus_distance += distance_travelled[bus_no][i];
	}
	float bus_fuel_cost = bus_distance * cost;
	return bus_fuel_cost;
}
///////////
float Revenue(int passengers, int fare, int total_buses, int days)
{
	float total_revenue = 0.0;
	for (int i = 1; i <= total_buses; i++)
	{
		for (int j = 1; j <= days; j++)
		{

			total_revenue += (passengers * fare);
		}

	}
	return total_revenue;
}
/////////////
float Speed(int time_to_travel, int distance_travelled[][3], int days, int bus_no, int total_buses)
{
	int avg_speed = 0;
	int bus_total_distance = 0;
	for (int i = 1; i <= total_buses; i++)
	{
		for (int j = 1; j < days; j++)
		{
			if (i == bus_no)
			{
				bus_total_distance += (distance_travelled[i][j]);
				avg_speed = bus_total_distance / time_to_travel;
			}
		}
	}
	return avg_speed;
}
void loading_screen(int seconds) {




	// useing 
	for (int i = 0; i < seconds; i++) {
		cout << "Loading please wait";
		for (int j = 0; j < i; j++) {
			cout << ".";
		}
		cout << endl;
		for (int k = 0; k < 100000000; k++); // pause for approximately one second
	}
}
int main()
{
	cout << "\033[48;5;102m"; // Set background color to zinc
	cout << "\033[30m";

	cout << " _______________________________________" << endl;
	cout << " WELCOME TO FAST TRANSPORTATION SERVICE!" << endl;
	cout << " _______________________________________" << endl;

	int fuel_consumption[3][3];
	int distance_travelled[3][3];
	int n;
	const int total_buses = 20;
	string user = "sir_shoaib";
	string pass = "pfj";
	string enteru;
	string enterp;
username:
	cout << "Enter username: ";
	cin >> enteru;
	if (enteru == user)
	{
	psw_again:
		cout << "Enter password: ";
		cin >> enterp;
		if (enterp == pass)
		{
			cout << "CORRECT PASSWORD!" << endl;
		}
		else
		{
			cout << "INVALID TRY AGAIN" << endl;
			goto psw_again;
		}

	}
	else {
		cout << "try again" << endl;
		goto username;

	}
	cout << "Enter the number of buses: " << endl;
	cin >> n;
	int bus_no;
	int days;
	cout << "Enter the number of days:" << endl;
	cin >> days;
	readData(fuel_consumption, distance_travelled, n, days);
	int option;
	float bus_fuel_cost = 0;
	float bus_average_speed = 0;
	float total_fuel_consumption_for_all_buses = 0;
	float total_distance_travelled_for_all_buses = 0;
	float total_revenue = 0;
	float passengers = 25;
	float fare = 2600;
	int seconds = 4;

	loading_screen(seconds);
again_value:
	cout << "SELECT THE OPTION YOU WANT TO IMPLEMENT:" << endl;

	cout << "1.Finding the total fuel consumption and distance traveled for each bus." << endl;
	cout << "2.Finding the average fuel efficiency for each bus and display its details." << endl;
	cout << "3.Finding the bus with the highest fuel efficiency and display its details." << endl;
	cout << "4.Calculating the total fuel cost for each bus and the average speed for each bus." << endl;
	cout << "5.Calculate the total fuel consumption and distance traveled for all buses in a given month." << endl;
	cout << "6.Calculate the total revenue generated by the bus transportation service for a given month,\n based on the number of passengers (assume) and the fare charged per passenger (assume)." << endl;
	cout << "7.Find the bus with the lowest fuel efficiency and display its details." << endl;
	cout << "8.Sort the data based on certain criteria, such as sorting by bus number or fuel efficiency." << endl;
	cin >> option;

	switch (option)
	{

	case 1:
	{
	invalid:
		cout << "Enter the bus number, you want to know the tuel consumption: " << endl;

		cin >> bus_no;

		if (bus_no > total_buses || bus_no <= 0)
		{
			cout << "Invalid bus number. " << endl;
			goto invalid;
		}
		cout << "Finding the total fuel consumption and distance traveled for each bus." << endl;
		cout << "The fuel consumption for " << bus_no << " is " << Total_fuel_consumption(fuel_consumption, bus_no, days, total_buses);
		cout << endl;
		cout << "The distance travelled for " << bus_no << " is " << Total_distance_travelled(distance_travelled, bus_no, days, total_buses);
		break;

	}
	case 2:
	{
	wrong:
		cout << "Enter the bus number, you want to know the average fuel efficeiency: " << endl;

		cin >> bus_no;

		if (bus_no > total_buses)
		{
			cout << "INVALID!" << endl;
			goto wrong;
		}

		cout << "The average fuel effuciency for the bus number " << bus_no << " is " << Average_fuel_effieciency(fuel_consumption, distance_travelled, bus_no, days, total_buses) << endl;
	}


	break;

	case 3:
	{
		cout << "The highest fuel efficiency is of the bus number " << Fuel_EFFICIENCY_Highest(fuel_consumption, distance_travelled, days, total_buses) << endl;
		break;
	}
	case 4:
	{
	fuel_invalid:
		cout << "Enter the bus number, you want to know the fuel costt: " << endl;

		cin >> bus_no;

		if (bus_no > total_buses || bus_no <= 0)
		{
			cout << "Invalid bus number. " << endl;
			goto 	fuel_invalid;
		}
		int cost;
		cout << "Enter the cost per gallon: " << endl;
		cin >> cost;
		cout << "Enter the number of days you want the total fuel cost upto: " << endl;
		cin >> days;
		cout << "The total fuel cost for the bus number " << bus_no << " for the " << days << " days is : " << Total_fuel_cost(bus_no, cost, distance_travelled, days);
		int time_to_travel = 84600 * 30;
		cout << " The average speed for the given bus no is : " << Speed(time_to_travel, distance_travelled, days, bus_no, n) << endl;
		break;

	}
	case 5:
	{
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				total_fuel_consumption_for_all_buses += fuel_consumption[i][j];
			}
		}
		cout << "The total fuel consumption for all the buses is : " << total_fuel_consumption_for_all_buses << endl;
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				total_distance_travelled_for_all_buses += distance_travelled[i][j];
			}
		}
		cout << "The total distance travelled for all the buses is : " << total_distance_travelled_for_all_buses << endl;


		break;
	}
	case 6:
	{
		int passengers;
		int fare;
		cout << "Enter the number of passengers per bus: " << endl;
		cin >> passengers;
		cout << "Enter the fare per seat: " << endl;
		cin >> fare;
		cout << "The total revenue of the transportation service is " << Revenue(passengers, fare, n, days) << endl;

		break;
	}
	case 7:
	{
		cout << "The lowest fuel efficiency is of the bus number " << Efiiciency_LOWEST(fuel_consumption, distance_travelled, days, total_buses) << endl;


		break;
	}
	case 8:
	{
		cout << "JUNK VALUES ARAHI THEIN SIR." << endl;

		break;
	}
	default:
	{
		cout << "Invalid Input!" << endl;
		goto again_value;
	}
	}
	cout << "\033[0m";
	return 0;
}

